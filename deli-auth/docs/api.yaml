openapi: 3.0.3
info:
    title: Authentication API
    description:
        "API for register, login and logout users"
    version: 1.0.0
    #servers:
    #- url: https://url.ru/v1/

tags:
    
    -   name: auth

security:
    -   BearerAuth: [ ]

paths:
    /v1/auth/user:
        post:
            summary: User registration
            description: "Registration of new user in the service by login,
             user type and password (transmitted in the header)"
            parameters:
                -   in: header
                    name: password
                    schema:
                        type: string
                        format: password
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegisterRequest'
            responses:
                '200':
                    description: Returns the ID of the user who was registered
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegisterResponse200'
                '400':
                    description: Invalid input
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '409':
                    description: User with this login already exists
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /v1/auth/login:
        post:
            tags:
                - auth
            description: "Authorization user in the server"
            parameters:
                -   name: password
                    in: header
                    schema:
                        type: string
                        format: password
                    required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AuthRequest'
            responses:
                '200':
                    description: "Success authorization. Return access token: str,
                    refresh token: str, expires time: int and their type: str"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AuthResponse200'
                    headers:
                        tokens:
                            description: "Info about tokens"
                            schema:
                                $ref: '#/components/schemas/TokenDto'
                '400':
                    description: "Invalid input"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '404':
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /v1/auth/logout:
        post:
            tags:
                - auth
            description: "Logout user"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogoutRequest'
                required: true
            responses:
                '200':
                    description: "Success logout. Return id: int, login: str, is_auth: boolean"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LogoutResponse200'
                '401':
                    description: "Unauthorized"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '404':
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    /v1/auth/user/reset:
        post:
            description: "Change password to the user by ID"
            parameters:
                -   name: id
                    in: query
                    schema:
                        type: integer
                        minimum: 0
                    required: true
                -   name: password
                    in: header
                    schema:
                        type: string
                        format: password
                    required: true
            responses:
                '204':
                    description: "Success response"
                '400':
                    description: "Invalid input"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '401':
                    description: "Not auth"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '403':
                    description: "Access denied"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '404':
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
    
    /v1/user:
        get:
            tags:
                - user
            description: "Get information about User"
            parameters:
                -   name: user
                    in: query
                    required: true
                    style: form
                    explode: true
                    schema:
                        $ref: '#/components/schemas/UserGetInfoRequest'
            responses:
                '200':
                    description: "Returns login and user type"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetUserInfoResponse'
                '400':
                    description: "Invalid input"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '404':
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
        
        patch:
            summary: "Update user information"
            description: "Change info about user by ID (login / user type)"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserUpdateRequest'
                required: true
            responses:
                '200':
                    description: "Returns the ID of the user whose info was changed"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserUpdateResponse200'
                '400':
                    description: "Invalid input"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'
                '404':
                    description: "User not found"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ErrorResponse'

components:
    schemas:
        UserType:
            type: string
            enum:
                - customer
                - courier
                - admin
            default: customer
        
        UserGetInfoRequest:
            type: object
            description: "A request that receives either a login or an id to get user information"
            properties:
                login:
                    type: string
                    description: "Uniq user name"
                id:
                    type: integer
                    minimum: 0
            oneOf:
                -   required: [ login ]
                -   required: [ id ]
        
        RegisterRequest:
            type: object
            description: "Struct describing the parameters
            passed for registration (login and type of user)"
            properties:
                login:
                    type: string
                    description: "Uniq user name"
                user_type:
                    $ref: '#/components/schemas/UserType'
            required:
                - login
                - user_type
        
        UserUpdateRequest:
            type: object
            description: "Object containing information for updating a user"
            properties:
                id:
                    type: integer
                    minimum: 0
                login:
                    type: string
                    description: "Uniq user name"
                user_type:
                    $ref: '#/components/schemas/UserType'
            required:
                - id
            anyOf:
                -   required: [ login ]
                -   required: [ user_type ]
        
        RegisterResponse200:
            type: object
            title: "RegisterSuccessResponse"
            properties:
                id:
                    type: integer
                    minimum: 0
            required:
                - id
        
        TokenDto:
            type: object
            properties:
                access_token:
                    type: string
                    description: "Short-term access token"
                refresh_token:
                    type: string
                    description: "Long-term access token"
                expires_in:
                    type: integer
                    description: "Access token validity period"
                token_type:
                    type: string
                    default: "bearer"
            required:
                - access_token
                - refresh_token
                - expires_in
        
        AuthRequest:
            type: object
            description: "Schema for authorization, password in header"
            properties:
                login:
                    type: string
            required:
                - login
        
        AuthResponse200:
            title: "AuthSuccessResponse"
            type: object
            properties:
                is_auth:
                    type: boolean
            required:
                - is_auth
        
        LogoutRequest:
            type: object
            properties:
                id:
                    type: integer
                    description: "User ID"
                    minimum: 0
            required:
                - id
        
        LogoutResponse200:
            type: object
            properties:
                id:
                    type: integer
                    description: "User ID"
                    minimum: 0
                login:
                    type: string
                    description: "Uniq user name"
                is_auth:
                    type: boolean
                    description: "Is the user logged in"
                    default: False
        
        UserUpdateResponse200:
            type: object
            title: "UserUpdateSuccessResponse"
            properties:
                id:
                    type: integer
                    minimum: 0
            required:
                - id
        
        GetUserInfoResponse:
            type: object
            title: "GetUserInformationResponse"
            properties:
                login:
                    type: string
                    description: "Uniq user name"
                user_type:
                    $ref: '#/components/schemas/UserType'
            required:
                - login
                - user_type
        
        ErrorResponse:
            type: object
            properties:
                message:
                    type: string
            required:
                - message
    
    parameters:
        UserIdParameter:
            name: id
            in: query
            description: "ID of user, which information we want to get"
            schema:
                type: string
            required: true
    
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
